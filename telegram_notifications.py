#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import time
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.last_notification_time = {}
        self.notification_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
    def send_message(self, message: str, alert_type: str = "general") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        current_time = time.time()
        last_time = self.last_notification_time.get(alert_type, 0)
        
        if current_time - last_time < self.notification_cooldown:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {alert_type} –ø—Ä–æ–ø—É—â–µ–Ω–æ (cooldown)")
            return False
            
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                self.last_notification_time[alert_type] = current_time
                logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {alert_type}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_critical_alert(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        formatted_message = f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n{message}\n\n‚è∞ {time.strftime('%Y-%m-%d %H:%M:%S')}"
        return self.send_message(formatted_message, "critical")
    
    def send_warning_alert(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        formatted_message = f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n{message}\n\n‚è∞ {time.strftime('%Y-%m-%d %H:%M:%S')}"
        return self.send_message(formatted_message, "warning")
    
    def send_info_alert(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        formatted_message = f"‚ÑπÔ∏è <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n\n{message}\n\n‚è∞ {time.strftime('%Y-%m-%d %H:%M:%S')}"
        return self.send_message(formatted_message, "info")
    
    def send_success_alert(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        formatted_message = f"‚úÖ <b>–£–°–ü–ï–•</b>\n\n{message}\n\n‚è∞ {time.strftime('%Y-%m-%d %H:%M:%S')}"
        return self.send_message(formatted_message, "success")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifier = TelegramNotifier(
    bot_token="8249088814:AAHhMajR1obd91FNJ4Hxt0Bbgm1YFwaBDdQ",
    chat_id="229956339"
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
last_report_time = 0
report_interval = 4 * 3600  # 4 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def check_system_status(health_data: dict) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
    global last_report_time
    
    if not health_data:
        notifier.send_critical_alert("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    available_accounts = 0
    total_enabled = 0
    flood_wait_accounts = []
    error_accounts = []
    
    for account_name, account_data in health_data.get("accounts", {}).items():
        if account_data.get("enabled"):
            total_enabled += 1
            
            if account_data.get("ready") and account_data.get("flood_wait_until", 0) <= 0:
                available_accounts += 1
            elif account_data.get("flood_wait_until", 0) > 0:
                flood_wait_accounts.append(account_name)
            
            if account_data.get("errors_count", 0) > 5:
                error_accounts.append(f"{account_name} ({account_data['errors_count']} –æ—à–∏–±–æ–∫)")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if available_accounts == 0 and total_enabled > 0:
        message = f"üö® <b>–ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í!</b>\n\n"
        message += f"üìä –í—Å–µ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {total_enabled}\n"
        message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {available_accounts}\n"
        message += f"‚è≥ –í FloodWait: {len(flood_wait_accounts)}\n"
        if flood_wait_accounts:
            message += f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {', '.join(flood_wait_accounts)}\n"
        if error_accounts:
            message += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {', '.join(error_accounts)}"
        
        notifier.send_critical_alert(message)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ FloodWait
    elif flood_wait_accounts and len(flood_wait_accounts) >= 2:
        message = f"‚ö†Ô∏è <b>–ú–ù–û–ì–û –ê–ö–ö–ê–£–ù–¢–û–í –í FLOODWAIT</b>\n\n"
        message += f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {', '.join(flood_wait_accounts)}\n"
        message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {available_accounts}/{total_enabled}"
        
        notifier.send_warning_alert(message)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    elif error_accounts:
        message = f"‚ö†Ô∏è <b>–í–´–°–û–ö–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –û–®–ò–ë–û–ö</b>\n\n"
        message += f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n{chr(10).join(error_accounts)}"
        
        notifier.send_warning_alert(message)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    elif available_accounts > 0 and available_accounts == total_enabled:
        message = f"‚úÖ <b>–°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n"
        message += f"–í—Å–µ {available_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
        
        notifier.send_success_alert(message)
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    current_time = time.time()
    if current_time - last_report_time >= report_interval:
        send_periodic_report(health_data)
        last_report_time = current_time

def send_periodic_report(health_data: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not health_data:
        return
    
    accounts = health_data.get("accounts", {})
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_enabled = 0
    available_accounts = 0
    flood_wait_accounts = 0
    total_requests = 0
    total_errors = 0
    account_details = []
    
    for account_name, account_data in accounts.items():
        if account_data.get("enabled"):
            total_enabled += 1
            requests_count = account_data.get("current_requests", 0)
            errors_count = account_data.get("errors_count", 0)
            total_requests += requests_count
            total_errors += errors_count
            
            if account_data.get("ready") and account_data.get("flood_wait_until", 0) <= 0:
                available_accounts += 1
                status = "‚úÖ"
            elif account_data.get("flood_wait_until", 0) > 0:
                flood_wait_accounts += 1
                status = "üî¥"
            else:
                status = "‚ö†Ô∏è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            max_requests = account_data.get("max_requests_per_hour", 0)
            usage_percent = (requests_count / max_requests * 100) if max_requests > 0 else 0
            account_details.append(f"{status} {account_name}: {requests_count}/{max_requests} ({usage_percent:.1f}%) | {errors_count} –æ—à–∏–±–æ–∫")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    message = f"üìä <b>–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ (4 —á–∞—Å–∞)</b>\n\n"
    message += f"üïê –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    message += f"üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_enabled}\n"
    message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {available_accounts}\n"
    message += f"üî¥ –í FloodWait: {flood_wait_accounts}\n"
    message += f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    message += f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}\n\n"
    
    if account_details:
        message += "<b>–î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:</b>\n"
        message += "\n".join(account_details)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if available_accounts == 0:
        message += "\n\nüö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï</b>"
    elif available_accounts < total_enabled * 0.5:
        message += "\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b> - –º–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    else:
        message += "\n\n‚úÖ <b>–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê</b>"
    
    notifier.send_info_alert(message)

def force_send_report():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    try:
        import requests
        response = requests.get("http://localhost:5000/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            send_periodic_report(health_data)
            print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    notifier.send_info_alert("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    time.sleep(1)
    
    notifier.send_warning_alert("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    time.sleep(1)
    
    notifier.send_critical_alert("–¢–µ—Å—Ç–æ–≤–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    time.sleep(1)
    
    notifier.send_success_alert("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "report":
        force_send_report()
    else:
        test_notifications() 
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""

import json
import time
import requests
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime
import csv
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn, TimeRemainingColumn
from rich.panel import Panel
from rich.table import Table
from rich import print as rprint

console = Console()

class BulkChecker:
    def __init__(self, api_url: str = "http://localhost:5000"):
        self.api_url = api_url
        self.results_dir = Path("bulk_results")
        self.results_dir.mkdir(exist_ok=True)
        
    def load_contacts_from_file(self, file_path: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        contacts = []
        file_path = Path(file_path)
        
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if file_path.suffix.lower() == '.csv':
            with open(file_path, 'r', encoding='utf-8') as f:
                reader = csv.reader(f)
                for row in reader:
                    if row:
                        contacts.append(row[0].strip())
        elif file_path.suffix.lower() == '.txt':
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        contacts.append(line)
        elif file_path.suffix.lower() == '.json':
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, list):
                    contacts = data
                elif isinstance(data, dict) and 'contacts' in data:
                    contacts = data['contacts']
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞")
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path.suffix}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        contacts = list(set(contacts))
        rprint(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        return contacts
    
    def check_api_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10)
            if response.status_code == 200:
                data = response.json()
                rprint(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('ready_clients', 0)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ")
                return True
            else:
                rprint(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            rprint(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    def process_contacts(self, contacts: List[str], batch_size: int = 10, 
                        save_progress: bool = True) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–∞—Ç—á–∞–º–∏"""
        
        if not self.check_api_status():
            raise Exception("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        total_contacts = len(contacts)
        results = {}
        processed = 0
        errors = 0
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        progress_file = self.results_dir / f"progress_{timestamp}.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if save_progress and progress_file.exists():
            try:
                with open(progress_file, 'r', encoding='utf-8') as f:
                    saved_data = json.load(f)
                    results = saved_data.get('results', {})
                    processed = saved_data.get('processed', 0)
                    rprint(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {processed} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            except Exception as e:
                rprint(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–ª–∏ username)
        is_phone = any('+' in contact or contact.replace(' ', '').isdigit() for contact in contacts[:10])
        endpoint = "/check_phones" if is_phone else "/check_usernames"
        field_name = "phones" if is_phone else "usernames"
        
        rprint(f"üîç –¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {'–¢–µ–ª–µ—Ñ–æ–Ω—ã' if is_phone else 'Username'}")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
            TimeRemainingColumn(),
            console=console
        ) as progress:
            
            task = progress.add_task(
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...", 
                total=total_contacts
            )
            
            progress.update(task, completed=processed)
            
            for i in range(processed, total_contacts, batch_size):
                batch = contacts[i:i + batch_size]
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = requests.post(
                        f"{self.api_url}{endpoint}",
                        json={field_name: batch},
                        timeout=120
                    )
                    
                    if response.status_code == 200:
                        batch_results = response.json()
                        results.update(batch_results)
                        processed += len(batch)
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                        batch_errors = sum(1 for r in batch_results.values() if 'error' in r)
                        errors += batch_errors
                        
                        progress.update(task, completed=processed)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        if save_progress:
                            with open(progress_file, 'w', encoding='utf-8') as f:
                                json.dump({
                                    'results': results,
                                    'processed': processed,
                                    'total': total_contacts,
                                    'errors': errors,
                                    'timestamp': datetime.now().isoformat()
                                }, f, indent=2, ensure_ascii=False)
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                        time.sleep(1)
                        
                    else:
                        rprint(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                        time.sleep(5)  # –ñ–¥–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        
                except Exception as e:
                    rprint(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
                    time.sleep(5)
        
        return {
            'results': results,
            'total_processed': processed,
            'total_contacts': total_contacts,
            'errors': errors,
            'success_rate': ((processed - errors) / processed * 100) if processed > 0 else 0
        }
    
    def save_results(self, results: Dict[str, Any], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"bulk_check_{timestamp}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        json_file = self.results_dir / f"{filename}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º CSV —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        csv_file = self.results_dir / f"{filename}.csv"
        with open(csv_file, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['contact', 'found', 'id', 'username', 'first_name', 'last_name', 
                      'premium', 'verified', 'bot', 'last_seen', 'bio', 'error']
            writer.writerow(headers)
            
            # –î–∞–Ω–Ω—ã–µ
            for contact, data in results['results'].items():
                if 'error' in data:
                    row = [contact, 'No', '', '', '', '', '', '', '', '', data['error']]
                else:
                    row = [
                        contact,
                        'Yes',
                        data.get('id', ''),
                        data.get('username', ''),
                        data.get('first_name', ''),
                        data.get('last_name', ''),
                        'Yes' if data.get('premium') else 'No',
                        'Yes' if data.get('verified') else 'No',
                        'Yes' if data.get('bot') else 'No',
                        data.get('last_seen', ''),
                        data.get('bio', '')[:100]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π bio
                    ]
                writer.writerow(row)
        
        rprint(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        rprint(f"   JSON: {json_file}")
        rprint(f"   CSV: {csv_file}")
    
    def show_summary(self, results: Dict[str, Any]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        total = results['total_contacts']
        processed = results['total_processed']
        errors = results['errors']
        found = processed - errors
        success_rate = results['success_rate']
        
        table = Table(title="üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", str(total))
        table.add_row("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", str(processed))
        table.add_row("–ù–∞–π–¥–µ–Ω–æ", str(found))
        table.add_row("–û—à–∏–±–æ–∫", str(errors))
        table.add_row("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
        
        console.print(table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
        if found > 0:
            premium_count = sum(1 for r in results['results'].values() 
                              if 'premium' in r and r['premium'])
            verified_count = sum(1 for r in results['results'].values() 
                               if 'verified' in r and r['verified'])
            bot_count = sum(1 for r in results['results'].values() 
                          if 'bot' in r and r['bot'])
            
            rprint(f"\nüìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            rprint(f"   Premium –∞–∫–∫–∞—É–Ω—Ç—ã: {premium_count}")
            rprint(f"   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {verified_count}")
            rprint(f"   –ë–æ—Ç—ã: {bot_count}")

def main():
    rprint(Panel.fit("üöÄ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", style="bold green"))
    
    checker = BulkChecker()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    while True:
        file_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: ").strip()
        if not file_path:
            rprint("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            continue
        
        try:
            contacts = checker.load_contacts_from_file(file_path)
            break
        except Exception as e:
            rprint(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            continue
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    batch_size = int(input("üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
    save_progress = input("üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").lower() != 'n'
    
    rprint(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    rprint(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    rprint(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {'–î–∞' if save_progress else '–ù–µ—Ç'}")
    
    if input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower() != 'y':
        rprint("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        results = checker.process_contacts(contacts, batch_size, save_progress)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        checker.show_summary(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        checker.save_results(results)
        
        rprint("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        rprint(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

if __name__ == "__main__":
    main() 
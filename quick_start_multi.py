#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import os
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich import print as rprint

console = Console()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import telethon
        import flask
        import requests
        import rich
        rprint("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        rprint(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        rprint("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False

def create_sample_config():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_content = {
        "accounts": [
            {
                "name": "account1",
                "api_id": "YOUR_API_ID_1",
                "api_hash": "YOUR_API_HASH_1",
                "phone": "+1234567890",
                "session_file": "session_account1.session",
                "enabled": True,
                "max_requests_per_hour": 50
            },
            {
                "name": "account2", 
                "api_id": "YOUR_API_ID_2",
                "api_hash": "YOUR_API_HASH_2",
                "phone": "+0987654321",
                "session_file": "session_account2.session",
                "enabled": True,
                "max_requests_per_hour": 50
            }
        ]
    }
    
    import json
    with open("multi_account_config.json", "w", encoding="utf-8") as f:
        json.dump(config_content, f, indent=2, ensure_ascii=False)
    
    rprint("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: multi_account_config.json")
    rprint("   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

def create_sample_contacts():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    sample_contacts = [
        "+1234567890",
        "+9876543210", 
        "username1",
        "username2"
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    with open("sample_contacts.txt", "w", encoding="utf-8") as f:
        for contact in sample_contacts:
            f.write(f"{contact}\n")
    
    import csv
    with open("sample_contacts.csv", "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        for contact in sample_contacts:
            writer.writerow([contact])
    
    rprint("üìù –°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:")
    rprint("   - sample_contacts.txt")
    rprint("   - sample_contacts.csv")

def show_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    rprint(Panel.fit("üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", style="bold blue"))
    
    rprint("""
1Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ Hash –Ω–∞ https://my.telegram.org/apps
   ‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω—É–∂–Ω—ã: API ID, API Hash, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_multi_accounts.py
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ API:
   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python flask_api_multi.py
   ‚Ä¢ –ò–ª–∏ —á–µ—Ä–µ–∑ systemd: sudo systemctl start telegram-checker-multi

4Ô∏è‚É£ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (TXT/CSV/JSON)
   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bulk_checker.py
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

5Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: curl http://localhost:5000/health
   ‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤: curl http://localhost:5000/accounts/status
   ‚Ä¢ –õ–æ–≥–∏: tail -f telegram_checker_multi.log
    """)

def main():
    rprint(Panel.fit("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã", style="bold green"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    rprint("\n" + "="*60)
    rprint("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    rprint("1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    rprint("2. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏") 
    rprint("3. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    rprint("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    rprint("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å API")
    rprint("6. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
    rprint("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
    
    if choice == "1":
        create_sample_config()
        rprint("\nüìù –¢–µ–ø–µ—Ä—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ multi_account_config.json —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
    elif choice == "2":
        create_sample_contacts()
        rprint("\nüìù –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
        
    elif choice == "3":
        show_instructions()
        
    elif choice == "4":
        rprint("\nüîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        os.system("python setup_multi_accounts.py")
        
    elif choice == "5":
        rprint("\nüöÄ –ó–∞–ø—É—Å–∫ API —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
        rprint("   API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5000")
        rprint("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        os.system("python flask_api_multi.py")
        
    elif choice == "6":
        rprint("\nüìä –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        os.system("python bulk_checker.py")
        
    elif choice == "0":
        rprint("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        
    else:
        rprint("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 
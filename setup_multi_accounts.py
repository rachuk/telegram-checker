#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import json
import os
from pathlib import Path
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich import print as rprint
from rich.table import Table
from rich.panel import Panel

from multi_account_manager import MultiAccountManager, AccountConfig

console = Console()

def create_account_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    rprint(Panel.fit("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞", style="bold blue"))
    
    name = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞", default="account1")
    api_id = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ API ID (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://my.telegram.org/apps)")
    api_hash = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ API Hash")
    phone = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã", default="+7")
    
    session_file = f"session_{name}.session"
    
    return AccountConfig(
        name=name,
        api_id=api_id,
        api_hash=api_hash,
        phone=phone,
        session_file=session_file,
        enabled=True,
        max_requests_per_hour=50
    )

def test_account(account: AccountConfig):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    rprint(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}...")
    
    try:
        from telethon.sync import TelegramClient
        
        client = TelegramClient(
            account.session_file,
            int(account.api_id),
            account.api_hash
        )
        
        with client:
            if client.is_user_authorized():
                me = client.get_me()
                rprint(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.name} —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{me.username or '–±–µ–∑ username'}")
                return True
            else:
                rprint(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return False
                
    except Exception as e:
        rprint(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
        return False

def main():
    rprint(Panel.fit("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤", style="bold green"))
    
    manager = MultiAccountManager()
    
    while True:
        rprint("\n" + "="*50)
        rprint("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        rprint("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        rprint("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        rprint("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        rprint("4. –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        rprint("5. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        rprint("6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏")
        rprint("0. –í—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "3", "4", "5", "6"])
        
        if choice == "0":
            if Confirm.ask("–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?"):
                break
        
        elif choice == "1":
            account = create_account_config()
            
            if Confirm.ask(f"–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç '{account.name}'?"):
                manager.accounts[account.name] = account
                rprint(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.name} –¥–æ–±–∞–≤–ª–µ–Ω")
                
                if Confirm.ask("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å–µ–π—á–∞—Å?"):
                    test_account(account)
        
        elif choice == "2":
            if not manager.accounts:
                rprint("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                continue
            
            table = Table(title="üì± –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
            table.add_column("–¢–µ–ª–µ—Ñ–æ–Ω", style="green")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
            table.add_column("–õ–∏–º–∏—Ç/—á–∞—Å", style="blue")
            
            for name, account in manager.accounts.items():
                status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if account.enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                table.add_row(
                    name,
                    account.phone,
                    status,
                    str(account.max_requests_per_hour)
                )
            
            console.print(table)
        
        elif choice == "3":
            if not manager.accounts:
                rprint("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                continue
            
            rprint("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            working_accounts = 0
            
            for name, account in manager.accounts.items():
                if test_account(account):
                    working_accounts += 1
            
            rprint(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {working_accounts}/{len(manager.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        elif choice == "4":
            if not manager.accounts:
                rprint("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                continue
            
            account_names = list(manager.accounts.keys())
            rprint("\nüóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            for i, name in enumerate(account_names, 1):
                rprint(f"{i}. {name}")
            
            try:
                idx = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä")) - 1
                if 0 <= idx < len(account_names):
                    name = account_names[idx]
                    if Confirm.ask(f"–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç '{name}'?"):
                        del manager.accounts[name]
                        rprint(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {name} —É–¥–∞–ª–µ–Ω")
                else:
                    rprint("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                rprint("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        
        elif choice == "5":
            if not manager.accounts:
                rprint("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                continue
            
            account_names = list(manager.accounts.keys())
            rprint("\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for i, name in enumerate(account_names, 1):
                rprint(f"{i}. {name}")
            
            try:
                idx = int(Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä")) - 1
                if 0 <= idx < len(account_names):
                    name = account_names[idx]
                    account = manager.accounts[name]
                    
                    rprint(f"\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ '{name}':")
                    rprint(f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {account.max_requests_per_hour} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
                    
                    new_limit = Prompt.ask("–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å", default=str(account.max_requests_per_hour))
                    try:
                        account.max_requests_per_hour = int(new_limit)
                        rprint(f"‚úÖ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {account.max_requests_per_hour}")
                    except ValueError:
                        rprint("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                        
                    if Confirm.ask("–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"):
                        account.enabled = not account.enabled
                        status = "–≤–∫–ª—é—á–µ–Ω" if account.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
                        rprint(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {status}")
                else:
                    rprint("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            except ValueError:
                rprint("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        
        elif choice == "6":
            manager.save_config()
            rprint("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            break
    
    rprint("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    rprint("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python flask_api_multi.py")

if __name__ == "__main__":
    main() 